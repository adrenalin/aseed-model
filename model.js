// Generated by CoffeeScript 1.7.1
(function() {
  define([], function() {
    var Model;
    return Model = (function() {
      Model.prototype._fields = {
        id: {
          type: 'Number',
          value: 0
        }
      };

      Model.prototype._namespace = {};

      function Model(opts) {
        if (opts == null) {
          opts = null;
        }
        this._fields = this.getFields();
        if (!opts) {
          opts = {};
        }
        this.setValues(opts);
        this.getFormData = function() {
          var formData, i, k, v, _i, _ref, _ref1;
          formData = {};
          _ref = this._fields;
          for (k in _ref) {
            v = _ref[k];
            if (this[k] instanceof Basemodel && typeof this[k].getFormData === 'function') {
              formData[k] = this[k].getFormData();
            } else if (this[k] instanceof Array) {
              formData[k] = [];
              for (i = _i = 0, _ref1 = this[k].length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
                if (typeof this[k][i].getFormData === 'function') {
                  formData[k].push(this[k][i].getFormData());
                } else {
                  formData[k].push(this[k][i]);
                }
              }
            } else if (k.type === 'Boolean') {
              if (this[k]) {
                formData[k] = 1;
              } else {
                formData[k] = 0;
              }
            } else {
              formData[k] = this[k];
            }
          }
          return formData;
        };
      }

      Model.prototype.getFields = function() {
        var Angular, defaults, fields, k, v;
        Angular = window.angular;
        if (typeof this._fields === 'undefined' || !Angular.isObject(this._fields)) {
          fields = {};
        } else {
          fields = this._fields;
        }
        defaults = {
          type: null,
          nullable: true,
          "default": null
        };
        for (k in fields) {
          v = fields[k];
          if (!Angular.isObject(v)) {
            fields[k] = Angular.extend({}, defaults);
            fields[k].type = v;
          } else {
            fields[k] = Angular.extend({}, defaults, v);
          }
        }
        return fields;
      };

      Model.prototype.getType = function(field) {
        var type;
        if (typeof this._fields[field] === 'undefined') {
          throw new Error("Field '" + field + "' is undefined");
        }
        if (typeof this._fields[field].type !== 'undefined') {
          return this._fields[field].type;
        }
        type = this._fields[field].toString();
        switch (true) {
          case type.match(/^null$/):
            return 'null';
          case type.match(/^array/i):
            return 'array';
          case type.match(/^object:/i):
            return type.replace(/object:/i, '');
          default:
            return type;
        }
      };

      Model.prototype.typecast = function(value, type) {
        switch (type) {
          case 'Number':
            if (value) {
              value = Number(value);
            }
            break;
          case 'String':
            if (value) {
              value = String(value);
            }
            break;
          case 'Boolean':
            value = !!value;
        }
        return value;
      };

      Model.prototype.setValues = function(values) {
        var className, def, error, i, k, key, obj, t0, t1, type, v, value, _ref, _results;
        if (values == null) {
          values = null;
        }
        try {
          _ref = this._fields;
          _results = [];
          for (k in _ref) {
            v = _ref[k];
            if (v === null) {
              v = '';
            }
            if (typeof v["default"] !== 'undefined') {
              def = v["default"];
            } else {
              def = null;
            }
            if (typeof v.type !== 'undefined') {
              type = v.type;
            } else {
              type = v;
            }
            key = type.toString().split(':');
            if (typeof values[k] === 'undefined') {
              if (key[0] === 'Array') {
                values[k] = [];
              } else {
                values[k] = def;
              }
            }
            t0 = key[0];
            if (typeof this._namespace[t0] !== 'undefined') {
              key = ['Object', t0];
            }
            if (typeof key[1] === 'undefined') {
              t1 = '';
            } else {
              t1 = key[1];
            }
            if (t0 === 'Array' && typeof this._namespace[t1] !== 'undefined') {
              key = ['Array', 'Object', t1];
            }
            switch (key[0]) {
              case 'Array':
                this[k] = [];
                if (key[1] === 'Object') {
                  if (typeof key[2] !== 'undefined') {
                    className = key[2];
                  } else {
                    className = null;
                  }
                  _results.push((function() {
                    var _i, _ref1, _results1;
                    _results1 = [];
                    for (i = _i = 0, _ref1 = values[k].length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
                      value = values[k][i];
                      if (!className) {
                        obj = value;
                      } else if (typeof window[className] !== 'undefined') {
                        obj = new window[className];
                      } else if (typeof this._namespace[className] !== 'undefined') {
                        obj = new this._namespace[className](value);
                      }
                      _results1.push(this[k].push(obj));
                    }
                    return _results1;
                  }).call(this));
                } else {
                  _results.push(this[k] = this.typecast(values[k], key[1]));
                }
                break;
              case 'Object':
                if (typeof key[1] !== 'undefined') {
                  className = key[1];
                } else {
                  className = null;
                }
                value = values[k];
                if (!className) {
                  obj = value;
                } else if (typeof window[className] !== 'undefined') {
                  obj = new window[className];
                } else if (typeof this._namespace[className] !== 'undefined') {
                  obj = new this._namespace[className](value);
                }
                _results.push(this[k] = obj);
                break;
              default:
                _results.push(this[k] = this.typecast(values[k], key[0]));
            }
          }
          return _results;
        } catch (_error) {
          error = _error;
          return console.error(error.toString());
        }
      };

      Model.prototype.getNavigation = function() {
        return [];
      };

      return Model;

    })();
  });

}).call(this);

//# sourceMappingURL=model.map
